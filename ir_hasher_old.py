#!/usr/bin/env python

import pigpio

class hasher:

   """
   This class forms a hash over the IR pulses generated by an
   IR remote.

   The remote key press is not converted into a code in the manner of
   the lirc module.  No attempt is made to decode the type of protocol
   used by the remote.  The hash is likely to be unique for different
   keys and different remotes but this is not guaranteed.

   This hashing process works for some remotes/protocols but not for
   others.  The only way to find out if it works for one or more of
   your remotes is to try it and see.

   EXAMPLE CODE

   #!/usr/bin/env python

   import time
   import pigpio
   import ir_hasher

   def callback(hash):
      print("hash={}".format(hash));

   pigpio.start()

   ir = ir_hasher.hasher(7, callback, 5)

   print("ctrl c to exit");

   time.sleep(300)

   pigpio.stop()
   """

   def __init__(self, gpio, callback, timeout=5):

      """
      Initialises an IR remote hasher on a gpio.  A gap of timeout
      milliseconds indicates the end of the remote key press.
      """

      self.gpio = gpio
      self.code_timeout = timeout
      self.callback = callback

      self.in_code = False

      pigpio.set_mode(gpio, pigpio.INPUT)

      self.cb = pigpio.callback(gpio, pigpio.EITHER_EDGE, self._cb)

   def _hash(self, old_val, new_val):

      if   new_val < (old_val * 0.60):
         val = 13
      elif old_val < (new_val * 0.60):
         val = 23
      else:
         val = 2

      self.hash_val = self.hash_val ^ val
      self.hash_val *= 16777619 # FNV_PRIME_32
      self.hash_val = self.hash_val & ((1<<32)-1)

   def _cb(self, gpio, level, tick):

      if level != pigpio.TIMEOUT:

         if self.in_code == False:

            self.in_code = True

            pigpio.set_watchdog(self.gpio, self.code_timeout)

            self.hash_val = 2166136261 # FNV_BASIS_32

            self.edges = 1

            self.t1 = None
            self.t2 = None
            self.t3 = None
            self.t4 = tick

         else:

            self.edges += 1

            self.t1 = self.t2
            self.t2 = self.t3
            self.t3 = self.t4
            self.t4 = tick

            if self.t1 is not None:

               d1 = pigpio.tickDiff(self.t1,self.t2)
               d2 = pigpio.tickDiff(self.t3,self.t4)

               self._hash(d1, d2)

      else:

         if self.in_code:

            self.in_code = False

            pigpio.set_watchdog(self.gpio, 0)

            if self.edges > 12:

               self.callback(self.hash_val)

if __name__ == "__main__":

   import time
   import pigpio
   import ir_hasher

   def callback(hash):
      print("hash={}".format(hash));

   pigpio.start()

   ir = ir_hasher.hasher(7, callback, 5)

   print("ctrl c to exit");

   time.sleep(300)

   pigpio.stop()

